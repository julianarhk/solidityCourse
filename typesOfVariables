bool public isActive = true; // boolean 

uint256 public totalSupply = 1000000; // integer

address public owner = 0xAb8483F64d9C6d1EcF9b849Ae677dD3315835cb2; // address

string public greeting = "Hello, world!"; // string

uint256[] public numbers = [1, 2, 3, 4, 5]; // array

struct Person {
    string name;
    uint256 age;
}

Person public alice = Person("Alice", 30);  // struct 

mapping (address => uint256) public balances;
balances[0x123...] = 1000; // mapping

enum State { Pending, Active, Inactive }
State public state = State.Active; // enum 

bytes public data = "0x1234"; // bytes

fixed public price = 1.5 fixed;
ufixed public rate = 0.75 ufixed; // fixed-point numbers

uint256 public startTime = block.timestamp;
uint256 public endTime = startTime + 1 days; // time units

function add(uint256 a, uint256 b) public pure returns (uint256) {
    return a + b;
}

function operation(uint256 a, uint256 b, function (uint256, uint256) pure returns (uint256) func) public pure returns (uint256) {
    return func(a, b);
}

uint256 public result = operation(2, 3, add); // function types


